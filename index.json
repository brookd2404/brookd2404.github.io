[{"categories":["Azure","Azure AD","Azure App Registrtions","Powershell","Intune"],"contents":"Have you ever needed to add a device to an Azure AD Group as part of your MEMCM or Autopilot deployment for specific app, profiles or scripts?\nWell it became the case that my organisation needed to do so for a couple of reason, one of those was to disable Windows Hello and the other for devices migrating from a previous Configuration Manager (Not MEMCM).\nBecause I was using Hybrid AD Join Autopilot Deployments it became the case that I had to use the devices' computer name and get the device information that way.\nFor you that don\u0026rsquo;t use the Hybrid AD Join Autopilot method, This creates two Azure AD computers, The first been purely Azure AD Joined and the second is an Intune (MDM Enrolled) object. Microsoft do link these together for the Bitlocker Keys etc. and from my understanding they are looking at making them just one object but at the time this article was written they remain two separate objects\u0026hellip;. I look forward to the day when two become one ;).\nOh\u0026hellip; did I also mention that you do not need to install any other modules for PowerShell to be able to run these script? No? Well that\u0026rsquo;s the nature of the game for me is to have as little reliance on Modules etc so the scripts can be run practically anywhere :D.\nThe Script You will notice that most of this (the authentication part and most of the param block at least) are the same as my other script\u0026hellip; But if its not broke why fix it? (Those famous last words!!!).\nAs mentioned above you will notice that this uses the computer name to identify the device and then use the information from that device object to add it to the Azure AD Group. When the device is identified from the name it gets the device Azure ID and then proceeds to create the JSON body for the request and then submits this to the API.\nparam( [Parameter(DontShow = $true)] [string] $MsGraphVersion = \u0026#34;beta\u0026#34;, [Parameter(DontShow = $true)] [string] $MsGraphHost = \u0026#34;graph.microsoft.com\u0026#34;, #The AzureAD ClientID (Application ID) of your registered AzureAD App [string] $ClientID = \u0026#34;\u0026lt;YourClientID\u0026gt;\u0026#34;, #The Client Secret for your AzureAD App [string] $ClientSecret = \u0026#34;\u0026lt;YourClientSecret\u0026gt;\u0026#34;, #Your Azure Tenent ID [string] $TenantId = \u0026#34;\u0026lt;YourTenentID\u0026gt;\u0026#34;, #The Azure AD Group Object ID [string] $GroupID = \u0026#34;\u0026lt;YourGroupID\u0026gt;\u0026#34;, #The name of the device [string] $InputDevice ) IF (!($InputDevice)) { $InputDevice = $env:COMPUTERNAME } #Create the body of the Authentication of the request for the OAuth Token $Body = @{client_id=$ClientID;client_secret=$ClientSecret;grant_type=\u0026#34;client_credentials\u0026#34;;scope=\u0026#34;https://$MSGraphHost/.default\u0026#34;;} #Get the OAuth Token  $OAuthReq = Invoke-RestMethod -Method Post -Uri \u0026#34;https://login.microsoftonline.com/$TenantId/oauth2/v2.0/token\u0026#34; -Body $Body #Set your access token as a variable $global:AccessToken = $OAuthReq.access_token $GroupMembers = Invoke-RestMethod -Method Get -uri \u0026#34;https://$MSGraphHost/$MsGraphVersion/groups/$GroupID/members\u0026#34; -Headers @{Authorization = \u0026#34;Bearer $AccessToken\u0026#34;} | Select-Object -ExpandProperty Value $Devices = Invoke-RestMethod -Method Get -uri \u0026#34;https://$MSGraphHost/$MSGraphVersion/devices?`$filter=startswith(displayName,\u0026#39;$InputDevice\u0026#39;)\u0026#34; -Headers @{Authorization = \u0026#34;Bearer $AccessToken\u0026#34;} | Select-Object -ExpandProperty Value | %{ if ($GroupMembers.ID -contains $_.id) { Write-Host -ForegroundColor Yellow \u0026#34;$($_.DisplayName)($($_.ID)) is in the Group\u0026#34; } else { Write-Host -ForegroundColor Green \u0026#34;Adding $($_.DisplayName)($($_.ID)) To The Group\u0026#34; $BodyContent = @{ \u0026#34;@odata.id\u0026#34;=\u0026#34;https://graph.microsoft.com/v1.0/devices/$($_.id)\u0026#34; } | ConvertTo-Json Invoke-RestMethod -Method POST -uri \u0026#34;https://$MSGraphHost/$MsGraphVersion/groups/$GroupID/members/`$ref\u0026#34; -Headers @{Authorization = \u0026#34;Bearer $AccessToken\u0026#34;; \u0026#39;Content-Type\u0026#39; = \u0026#39;application/json\u0026#39;} -Body $BodyContent } } The Pre-Reqs To make the script work you will need an Azure App Registration with the following permissions for the Microsoft Graph API;\n GroupMember.ReadWrite.All Group.ReadWrite.All Directory.ReadWrite.All  GRAPH API DOCUMENTATION You will also need the Group ID and Tenant ID, to find this following these steps\n Login to the Azure AD console (You can get your Tenant ID from the Overview tab under Tenant Information) Select Groups Search for the group you want to utilise and open it From the Group overview page copy the Object ID as this is the Group ID we need.  If your not sure how to create an Azure AD App Registration head over to one of my other posts by clicking HERE, Don't forget to store your Client ID and Secret securely and also have it to hand for the rest of the post :D. Executing the Script There are numerous ways you can execute this script, you could use it as a script in Script in MEMCM or Intune, In a Task Sequence, as an Application or Package (You will need to add some for of check file for the detection rule) or you could execute this directly from the command line.\nI will demonstrate the Script in MEMCM and Intune for you.\nScript in MEMCM This is the best option if you want to do it manually on a case by case basis (i.e. Right click on the computer object and select run script).\nJump into the Script section in MEMCM (Software Library \u0026gt; Scripts) and click Create Script from the ribbon.\nGive the script a Name, select the language as PowerShell and then copy and paste the script above (Tip: In the top right corner of the script block you can click Copy Script Text).\nClick Next, This is where you need the details we noted earlier. MEMCM is great at pulling through the Param block parameters, all we need to do is amend the ClientID, ClientSecret and TenantId arguments as below.\nAs we are using the environment variable for the InputDevice we will need to Hide this from selection as the script will use the Environment Variable if the parameter is not used.\nDouble Click on InputDevice, Change the Hidden drop down to True click OK.\nWhen finished click Next review the settings and then click next and then close.\n Don\u0026rsquo;t forget to Approve your Script\n Now lets choose a client computer from Assets and Compliance \u0026gt; Devices. Right click on the object and select Run Script, Select the script object you created and review the details and then let the script run.\nThis does not take long to run and the output of the script if the device is successfully added to the group is as below;\nAs mentioned before as these devices are Hybrid Joined they have two entries in Azure AD which is why the output shows its adding the device twice with two different GUIDS.\nScript in Intune This time the script needs to be saved as a .ps1 file to be uploaded and used by Intune, unfortunately using the Scripts section in Intune you cannot specify parameters so you will need to put your Client ID, Secret, TenantID and Group ID into the script before uploading. You could use a Win32 App as an alternative method if you wish to use them via the command line. Once you\u0026rsquo;ve saved the script launch the Endpoint Manager Console from your favourite web browser.\nSelect Devices from the left hand pane, under the Policy section click Scripts.\nClick Add \u0026gt; Windows 10, Name your script appropriately and enter a short description (Even a link to this blog :P), Once you\u0026rsquo;ve done hit next and then select your script to use.\nLeave all of the sliders as No;\nClick Next, Add your Scope Tags (if any) and your assignments. Review the configuration and click Add.\nThis doesn\u0026rsquo;t run instantaneously, please refer to the Microsoft Documentation this also has some other notable consideration listed.\nTo Conclude These are just two of the ways you can run the script, you could also potentially run this in the back end of a web application for people who want to request to disable things like Windows Hello (As I mentioned at the start). I could spent days, weeks even months on writing articles for some of the uses. A user one will no doubt follow in due course so watch this space :D.\nI did fully test these methods at the time of writing the blog but if you come across any information you think may be wrong then please leave a comment or e-mail me on David@euc365.com.\nI hope this is useful for your needs.\n","date":"11 August, 2020","image":["images/post/addtoaadgroup/Featuredimage.png"],"permalink":"https://hugo.euc365.com/add-devices-to-an-azure-ad-group-using-the-microsoft-graph-api/","tags":null,"title":"Add devices to an Azure AD Group using the Microsoft Graph API"},{"categories":["Azure","Azure AD","Azure App Registrtions","Powershell","Autopilot","Intune"],"contents":"I have been working on a project at the company I work for, and up to this point we have been primarily focused on getting new devices imported and deploying via Autopilot.\nNow we have successfully leaped over that hurdle with very little issues (apart from the odd TPM attestation issue here and there and the ESP Profile page been skipped), we moved onto focusing on our current estate and how to import these into Autopilot .\nThere is a couple of ways to do this, you could run this in a package, as an application, as a script or in a task sequence for when you decide to re-build the machines.\nNow the choice is yours on which method will suit your organisation the best.\nThe Script Now on GitHub\nNow, lets talk about the script itself. When I started out on this path I used Michael Niehaus' Get-WindowsAutoPilotInfo script, even before this had the -online parameter. I was also hoping to leverage the same script for importing devices into Autopilot silently.\nThere was however a couple of stumbling blocks for me not doing so, the first been the Connect-MSGraph would not connect using the ClientID and Secret from the Azure App Registration and kept prompting for credentials. The second being it downloaded other PowerShell Modules. This was an issue for us as firstly it added a further time delay to the script and secondly one of our security product blocked it during this process.\nI had also recently started leveraging the Microsoft Graph API and decided to find a way to do this without additional the modules while achieving the same outcome. And the following is the outcome.\nI have recently updated the script (28/08/2020) to include the use of Group Tags, but also to add the -Hash parameter. The hash parameter allows you to use any device has to register it with your tenant, for example if you had a folder with a set of .csv files containing the device hash\u0026rsquo;s you could do a recursive import of all of these.\nIf you want to export a device hash to a CSV file to test this use the following command which will create the CSV.\nYou can either copy and paste the hash or import the CSV into PowerShell and reference it that way.\nGet-CimInstance -Namespace root/cimv2/mdm/dmmap -Class MDM_DevDetail_Ext01 -Filter \u0026#34;InstanceID=\u0026#39;Ext\u0026#39; AND ParentID=\u0026#39;./DevDetail\u0026#39;\u0026#34; | Export-CSV \u0026#34;C:\\$($ENV:ComputerName)_HardwareInformation.csv\u0026#34; -NoTypeInformation \u0026lt;#PSScriptInfo .VERSION 2.0 .AUTHOR David Brook .COMPANYNAME EUC365 .COPYRIGHT .TAGS Autopilot; Intune; Mobile Device Management .LICENSEURI .PROJECTURI .ICONURI .EXTERNALMODULEDEPENDENCIES .REQUIREDSCRIPTS .EXTERNALSCRIPTDEPENDENCIES .RELEASENOTES Version 2.0: Added the ability to make the script accept command line arguments for just the Hash and also allow Group Tags Version 1.0: Original published version. #\u0026gt; \u0026lt;# .SYNOPSISThis script will import devices to Microsoft Endpoint Manager Autopilot using the device\u0026#39;s hardware hash. .DESCRIPTIONThis script will import devices to Microsoft Endpoint Manager Autopilot using the device\u0026#39;s hardware hash with the added capability of been able to add a Group Tag. .PARAMETERMSGraphVersion The Version of the MS Graph API to use Default: Beta e.g: 1.0 .PARAMETERMsGraphHost The MS Graph API Host Default: graph.microsoft.com .PARAMETERClientID This is the Azure AD App Registration Client ID .PARAMETERClientSecret This is the Azure AD App Registration Client Secret .PARAMETERTenantId Your Azure Tenant ID .PARAMETERHash This parameter is to be used if you want to import a specific hash from either a file or copying and pasting from an application. .PARAMETERGroupTag This Parameter is to be used if you want to Tag your devices with a specific group tag. .EXAMPLE.\\Enroll_to_Autopliot_Unattended.ps1 -ClientID \u0026#34;\u0026lt;Your Client ID\u0026gt;\u0026#34; -Client Secret \u0026#34;\u0026lt;YourClientSecret\u0026gt;\u0026#34; -TenantID \u0026#34;\u0026lt;YourTenantID\u0026gt;\u0026#34; This will enroll the device it is running on to Autopilot, Please note this will need to be done as an administrator .EXAMPLE.\\Enroll_to_Autopliot_Unattended.ps1 -ClientID \u0026#34;\u0026lt;Your Client ID\u0026gt;\u0026#34; -Client Secret \u0026#34;\u0026lt;YourClientSecret\u0026gt;\u0026#34; -TenantID \u0026#34;\u0026lt;YourTenantID\u0026gt;\u0026#34; -GroupTag \u0026#34;Sales Device\u0026#34; This will enroll the device it is running on to Autopilot with a Group Tag of Sales Device, Please note this will need to be done as an administrator .EXAMPLE.\\Enroll_to_Autopliot_Unattended.ps1 -ClientID \u0026#34;\u0026lt;Your Client ID\u0026gt;\u0026#34; -Client Secret \u0026#34;\u0026lt;YourClientSecret\u0026gt;\u0026#34; -TenantID \u0026#34;\u0026lt;YourTenantID\u0026gt;\u0026#34; -Hash \u0026#34;\u0026lt;A Hash\u0026gt;\u0026#34; This will enroll the inputed deivce Hash to Autopilot, this can be done against a group of CSV files etc. #\u0026gt; param( [Parameter(DontShow = $true)] [string] $MsGraphVersion = \u0026#34;beta\u0026#34;, [Parameter(DontShow = $true)] [string] $MsGraphHost = \u0026#34;graph.microsoft.com\u0026#34;, #The AzureAD ClientID (Application ID) of your registered AzureAD App [string] $ClientID = \u0026#34;\u0026lt;YourClientID\u0026gt;\u0026#34;, #The Client Secret for your AzureAD App [string] $ClientSecret = \u0026#34;\u0026lt;YourSecret\u0026gt;\u0026#34;, #Your Azure Tenent ID [string] $TenantId = \u0026#34;\u0026lt;YourTenant\u0026gt;\u0026#34;, [string] $Hash, [string] $GroupTag ) Begin { #Create the body of the Authentication of the request for the OAuth Token $Body = @{client_id=$ClientID;client_secret=$ClientSecret;grant_type=\u0026#34;client_credentials\u0026#34;;scope=\u0026#34;https://$MSGraphHost/.default\u0026#34;;} #Get the OAuth Token  $OAuthReq = Invoke-RestMethod -Method Post -Uri \u0026#34;https://login.microsoftonline.com/$TenantId/oauth2/v2.0/token\u0026#34; -Body $Body #Set your access token as a variable $global:AccessToken = $OAuthReq.access_token } Process { if(!$Hash) { $session = New-CimSession # Get the common properties. Write-Verbose \u0026#34;Checking $comp\u0026#34; $serial = (Get-CimInstance -CimSession $session -Class Win32_BIOS).SerialNumber # Get the hash (if available) $devDetail = (Get-CimInstance -CimSession $session -Namespace root/cimv2/mdm/dmmap -Class MDM_DevDetail_Ext01 -Filter \u0026#34;InstanceID=\u0026#39;Ext\u0026#39; AND ParentID=\u0026#39;./DevDetail\u0026#39;\u0026#34;) if ($devDetail) { $hash = $devDetail.DeviceHardwareData } else { $hash = \u0026#34;\u0026#34; } Remove-CimSession $session } } End { if(!($GroupTag)) { $PostData = @{ \u0026#39;hardwareIdentifier\u0026#39; = \u0026#34;$hash\u0026#34; } | ConvertTo-Json } else { $PostData = @{ \u0026#39;hardwareIdentifier\u0026#39; = \u0026#34;$hash\u0026#34; \u0026#39;groupTag\u0026#39; = \u0026#34;$GroupTag\u0026#34; } | ConvertTo-Json } $Post = Invoke-RestMethod -Method POST -Uri \u0026#34;https://$MSGraphHost/$MsGraphVersion/devicemanagement/importedWindowsAutopilotDeviceIdentities\u0026#34; -Headers @{Authorization = \u0026#34;Bearer $AccessToken\u0026#34;; \u0026#39;Content-Type\u0026#39; = \u0026#39;application/json\u0026#39;} -Body $PostData DO { Write-Host \u0026#34;Waiting for device import\u0026#34; Start-Sleep 10 } UNTIL ((Invoke-RestMethod -Method Get -Uri \u0026#34;https://$MsGraphHost/$MsGraphVersion/Devicemanagement/importedwindowsautopilotdeviceidentities/$($Post.ID)\u0026#34; -Headers @{Authorization = \u0026#34;Bearer $AccessToken\u0026#34;} | Select-Object -ExpandProperty State) -NOTmatch \u0026#34;unknown\u0026#34;) Invoke-RestMethod -Method Get -Uri \u0026#34;https://$MsGraphHost/$MsGraphVersion/Devicemanagement/importedwindowsautopilotdeviceidentities/$($Post.ID)\u0026#34; -Headers @{Authorization = \u0026#34;Bearer $AccessToken\u0026#34;} | Select-Object -ExpandProperty State } The Pre-Reqs To make the script work you will need an Azure App Registration with the DeviceManagementServiceConfig.ReadWrite.All permission for the Microsoft Graph API.\nIf your not sure how to create an Azure AD App Registration head over to one of my other posts by clicking HERE, Don\u0026rsquo;t forget to store your Client ID and Secret securely and also have it to hand for the rest of the post :D.\nExecuting the Script As mentioned before there are numerous ways you can run this script, however I will demonstrate 2 different ways to do so, I will just mention though that if you do use this as an Application you will need to amend the script to add some form of check file or registry key.\nScript in MEMCM This is the best option if you want to do it manually on a case by case basis (i.e. Right click on the computer object and select run script).\nJump into the Script section in MEMCM (Software Library \u0026gt; Scripts) and click Create Script from the ribbon.\nGive the script a Name, select the language as PowerShell and then copy and paste the script above (Tip: In the top right corner of the script block you can click Copy Script Text).\nClick Next, This is where you need the details we noted earlier. MEMCM is great at pulling through the Param block parameters, all we need to do is amend the ClientID, ClientSecret and TenantId arguments as below. When finished click Next review the settings and then click next and then close.\nDon\u0026rsquo;t forget to Approve your Script\n Now choose your victim\u0026hellip; erm I mean client computer from Assets and Compliance \u0026gt; Devices. Right click on the object and select Run Script, Select the script object you created and review the details and then let the script run :D. This can take about 2/5 minutes, as it keeps a loop going until the device is imported. When the script finishes if you look at the script out put you will see the following;\nIf you notice the last output shows the import status of the device.\nIn a Task Sequence in MEMCM I wont go into how to create the entire Task Sequence for a device rebuild however I will explain how you can use the script to import the device into Autopilot during a Task Sequence weather it be a new one or a current one.\nHead over to Software Library \u0026gt; Operating System \u0026gt; Task Sequences so we can get started.\nI will be using a current Task Sequence for this Demo. There may be a future post on how to create a Task Sequence to re-build your device to a standard OS with Drivers and Import it to Autopilot.\nMy existing Task Sequence looks like this;\nThis is a very basic TS which just boots to Win PE, Installs windows and loads driver packs for VMware Virtual Machines (Only a test TS).\nI no longer want to have to re-build the device and then import it to Autopilot Manually so instead we add the script to the top of the TS as follows.\n Click Add \u0026gt; General \u0026gt; Run Powershell Script  Enter a Name and Description for the script Select Enter a PowerShell Script Click Add Script Copy the Script above and paste it into the window and click OK In the Parameters box enter  -ClientID \"\" -ClientSecret \"\" -TenantId \"\"   Select Bypass under the PowerShell Execution Policy drop-down  Your window should then look like this; \u0026lt;img class=\u0026ldquo;aligncenter src=\u0026quot;/images/post/enroltoap/AddedPStoTS.png\u0026rdquo; alt=\u0026quot;\u0026quot; width=\u0026ldquo;959\u0026rdquo; height=\u0026ldquo;653\u0026rdquo; /\u0026gt;\nHit Apply and then OK and give it a whirl on your machine (well not yours\u0026hellip; always be sure to test it first :P)\nWhen it runs you will see the following appear (depending on your Task Sequence);\nThe device will then be enrolled into Autopilot;\nWhen the device then reboots after my task sequence I am presented with the expected Autopilot Enrolment window.\nTo Conclude So I have shown two ways of using the script to enroll to Autopilot Unattended, now there is nothing preventing you running this from the command line with the same parameters however if you wanted to do it that way I would definitely look at Michael Niehaus' Get-WindowsAutopilotInfo script (See the opening few paragraphs with the links to these) as this does not require an App Registration.\nI did fully test these methods at the time of writing the blog but if you come across any information you think may be wrong then please leave a comment or e-mail me on David@euc365.com.\nI hope this is useful for your needs.\n","date":"7 August, 2020","image":["images/post/enroltoap/featuredImage.png"],"permalink":"https://hugo.euc365.com/enrol-devices-to-autopilot-unattended/","tags":null,"title":"Enrol Devices to Autopilot (Unattended)"},{"categories":["Azure","Azure AD","Azure App Registrtions"],"contents":"What can you use an Azure App Registration for An Azure App Registration has many uses, in my case I use it mainly for the Microsoft Graph API to perform Intune Configuration Profile backups, List devices, Update local CMDB dynamically and also enrol devices into Autopilot.\nYou will see the vast amount of options you can use for the API when you start adding the API permissions below.\nIf you are also using MEMCM and Co-Managing devices with Intune or you have this Azure Tenant attached this will also be using an Azure App Registration to read user details and use user impersonation.\nHowever as you will notice this guide is focused on using the App Registration with the Microsoft Graph API with Client Secrets.\nFinding what API Permission is required for your Microsoft Graph API Call Each API can have a different set of permissions required to be able to read and/or write data. The best way to find these is by using the Microsoft Graph API Reference Guide .\nOnce you have loaded the API Reference guide, you will notice a list of categories for the API like below.\nFor this post I am using the importedWindowsAutopilotDeviceIdentities API reference which is in the Beta API. You can change what API Reference you are using by using the drop down under the Version header in the left-hand pane.\nIf you browse to Devices and apps \u0026gt; Corporate management \u0026gt; Imported windows autopilot device identity \u0026gt; List, You will see under the prerequisites which permissions that particular API requires as highlighted below.\nI will be using the Application permissions as the App this was created for is unattended\n You will notice that even though you are only listing devices that the ReadWrite permission is listed in the permission set. If you look closer at the permission table headers you will see it states Permissions (from most to least privileged) meaning that to use the full functionality of this API (such as Create, Delete and Update) you will need the ReadWrite permission, However if you just wanted to list the data you would only need the least amount of privileges which is Read.\nHave a browse around and notice the differences in different categories before moving on.\nCreating the Azure App Registration Head over to the Azure Portal  and launch Azure Active Directory.\nFrom the pane on the left select \u0026lt;strong\u0026gt;App Registrations\u0026lt;/strong\u0026gt; , from here you can either choose to use an existing registrations or create one for this specific purpose. I would however recommend that you use a specific one for this purpose, this way the app does not have more permissions than it requires.\nLets get started;\n Click New Registration from the ribbon Give the App a name that represents its purpose and leave the rest as default and click Register   From the left pane, select API Permissions, This is where we are going to grant the App the permission to the Microsoft Graph API Select Add a permission from the ribbon, you will see a pop out like the below;   Click on Microsoft Graph \u0026gt; Application Permissions In the search box type Service and this will show the permissions we require   Click Add Permissions You will then see a orange banner stating that the permissions are being edited and consent will need to be given   Click the Grant admin consent for, click Yes on the banner to confirm your would like to grant consent  \n Next we need a client secret... you will need to store this in a safe place as once you click of the page its hides all but a few characters. Click Client \u0026amp; Secrets from the pane on the left Click New Client Secret  Specify a description, if you are going to put this in numerous locations and let multiple people use it you could relate it to that team/department. But for this example we will keep it simple. Specify a validity period, you have three options, 1 year, 2 years or never. I would not recommend using the later and would ensure that you have processes in place to review the application     When you have added the secret, copy the value as you will need this later.  To go with the client secret you will also need the Application (Client) ID and the Directory (tenant) ID. These can be found on the Overview page.\nThe details you have gathered from this article you can use them to perform unattended actions on the Microsoft Graph API and other services. I will be posting some other blog posts which relate to using these details so keep an eye on the blog for interesting ways to use the App Registrations.\n","date":"8 July, 2020","image":["images/post/createazureapp/featuredImage.png"],"permalink":"https://hugo.euc365.com/create-an-azure-app-registration/","tags":null,"title":"Create an Azure App Registration"},{"categories":["Intune","Powershell Tools","PowerShell"],"contents":"What is an OMA-URI Policy? Meaning: Open Mobile Alliance Uniform Resource Identifier Traditionally when you implement a new piece of software which contains Group Policy Objects (GPO\u0026rsquo;s) to customise the feature of the application you would import the .adml and .admx files into the PolicyDefinitions folder located within SysVol (SYSVOL) for the domain or into the local PolicyDefinitions (C:/WindowsPolicyDefinitions) folder.\nIf like me you are wanting to move most if not all of your policies to Intune for better MDM (Mobile Device Management) then you can run into a rather complex scenario where you need to ingest the .admx file and then work out how to configure your policies correctly. Now the first time I looked at this I thought \u0026lsquo;Oh man this looks tricky, its a job for later on\u0026rsquo;. However after putting it off for so long I finally dived into it and it turns out it isn\u0026rsquo;t as complicated as it looks.\nThe link to the Microsoft Guide can be found HERE!! , Feel free to head over and check it out. Hopefully this post/guide can help you out when it comes to creating your own.\nImporting your ADMX file For this example we will be using Google Chrome\u0026rsquo;s GPO\u0026rsquo;s, Not because they are simple because each policy has its own complexities but because it will be a common policy people will look to migrate to Intune. The ADMX files can be found on the Chrome for Enterprise Download Page , you can obtain the gpo files only be finding the Manage Chrome Browser section.\nOnce downloaded extract the .zip file and find the Chrome.admx (Normally located within WindowsADMX), Open this in a text editor (Notepad will do fine). Now we will switch over to Intune, From the Endpoint Manager Admin Center Homepage select Devices \u0026gt; Configuration Profiles from the navigation bar. Click Create profile.\n Click **Create Profile** Select the following and click **Create**;   Enter the name for your profile (i.e Windows - Google Chrome Policy) and any other information you wish to add, click **Next** Now here is the fun part, Click **Add**   Enter a Name (Use something Descriptive) and Enter a description The OMA-URI Field Should be something like the below  .**/Vendor/MSFT/Policy/ConfigOperations/ADMXInstall/{AppName}/Policy/{ADMXFileName}**   Data Type: **String** Value: Paste the contents of the chrome.admx file   Click Add Now Proceed to deploy the policy (I would recommend doing this to a test group first)  The above path determines what the OMA-URI is for future policies, for example if you enter **./Vendor/MSFT/Policy/ConfigOperations/ADMXInstall/Chrome/Policy/ChromeAdmx **as the OMA-URI for the device import the policies within the ADMX will then be formatted like Chrome~Policy~googlechrome~Startup. \nThe full path for the OMA-URI for the Homepage Setting would be ./{AppName}/Vendor/MSFT/Policy/Config/Chrome~Policy~googlechrome~Startup/HomepageLocation. The format of the URI is is {AppName}~{SettingType}~{CategoryandSubCategory}.\nNow the category path may not just be a root category for example the startup settings will look like this Chrome~Policy~googlechrome~Startup to break it down\n  AppName: Chrome (Set in the ADMX File Ingest) SettingType: Policy (Set in the ADMX File Ingest) CategoryAndSubCategory  Category: googlechrom Sub Category: Startup      Now this may seem complicated at first glance, however do keep reading and I will explain how to obtain the paths and settings. Finding and Creating Policies Before we get started, if you haven\u0026rsquo;t already re-open the properties of the policy you created previously. You will also need to open the .admx files in your favourite text editor. Personally I use VSCode as it has syntax highlighting for XML files and many other useful features.\nNOTE: This section requires this to be published to a device.\nTo get started Open the Chrome.admx and **Chrome.adml **(This will be in the language folder i.e. en-US within the .zip file) and launch REGEDIT (Registry Editor).\nLet\u0026rsquo;s get started, within REGEDIT browse to **HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/PolicyManager/AdmxDefault **(There is always a random GUID per device, however this doesn\u0026rsquo;t make a difference to the policy so don\u0026rsquo;t worry :D), from here if you deployed the Chrome Policy as per the above steps you will see something like the below. (Note: this is showing Google Updates, but we will\nAs mentioned above they are broken down like below, we will be sticking with the Homepage setting which is within the startup category.\n AppName: Chrome SettingType: Policy Categories:  Root Category: googlechrome Sub Category: startup    Now if you look at the .admx file, you will see the following under the categories section As you can see that this correlates with with policy in the registry, now if you expand the policy within the registry you can see that the HomePage Location settings is created from within there\nThis is the part where you actually need the .admx file. Lets start by explaining why you need to use .admx file. For this example you are not only enabling or disabling a policy but you will be actually specifying a value. When you go to specify this value in Intune you will need to use the ValueName from within the ADMX File. See the below example;\nLets break the policy setting down first, As always I would recommend naming the setting descriptively and also adding a description if you want more information about it. The OMA-URI would then be ** ./Device/Vendor/MSFT/Policy/Config/Chrome~Policy~googlechrome~Startup/HomepageLocation.**\nClass (Device or User) One things to note here is the first section of the OMA-URI, It seems simple but you will need to specify if you want to apply this to a **Device **or User. Some policies are only available for Devices and likewise fort Users. You can see this in the ADMX File by looking at the policy like below\nNow the HomePageLocation setting can be User or Device based so the class shows as Both. If this was a device only policy class=\u0026ldquo;Machine\u0026rdquo; and for a user only policy it would show as class=\u0026ldquo;User\u0026rdquo;.\nAppName As mentioned above the AppName is can be totally customisable however I wouldn\u0026rsquo;t advise that and I would keep it as simple and descriptive as possible.\nFor example, For this post I used Chrome as the AppName so the Policies show as Chrome~{SettingType}~{Root Category}~{Sub Category}. If i was to do another policy for Lenovo Vantage for example and set the AppName to LenovoVantage the polcies would show** LenovoVantage~{SettingType}~{Root Category}~{Sub Category}. **\nSettingType As we imported the ADMX into the Policy section (./Vendor/MSFT/Policy/ConfigOperations/ADMXInstall/{AppName}/Policy/{ADMXFileName}) of the ADMXInstall OMA-URI this part of the OMA-URI would always be policy.\nCategories and Sub-Categories This is detailed above but I will elaborate a little bit more here.\nIf you look at the .admx file, and browse to the categories section you will see lots of categories set with a parent category within there.\nIf you work backwards you can see how this all comes together,\nThe OMA-URI is** Chrome~Policy~{Root Category}~{Sub** **Category}**\n **Sub Category:** Startup **Root Category:** googlechrome  Something to not here is that it is possible for a parent category to have another parent category to make matters more confusing. You could end up having a policy like **{AppName}~Policy~{Parent Category 1}~{Parent Category 2}~{Sub Category} ** and so on... Just something to always check. This is partly the reason to always check the registry when creating polcies.\nThe Policy Itself So finally we come to the policy itself, at the end all the OMA-URI string comes the setting, in this case HomePageLocation.\nThis is derived again from the .admx file, if you search for the policy you will come across something like the above screenshot. You will notice that the policy is based on the DisplayName property. We won\u0026rsquo;t cover setting the value in this section as I feel it deserves its own.\nThe Policy Value/Setting Some setting are really simple to configure, for example if you want to disable something like MetricsReportingEnabled you can simply just add like below\nOthers like the HomePageLocation are not complicated but require a little bit more than just a simple disable or enable switch as you need to specify a value for the property.\nAgain jumping back into the .admx file, if you look at the last highlighted section of the below screenshot you can see that there is a ValueName, now this is the value we need want to change.\nto do this you would need to write the policy string like the below screenshot\nIf you look at the data id section, this is where you would put the value name in out of the .admx file, from there you would then set the value of that property for example https://euc365.com.\nIf you apply this policy and sync it to your device you will notice that it will change the Homepage upon start up.\nNow\u0026hellip; Here is another example of adding a string to a policy which requires multiple values. This once is not so much tricky but its messy.\nFor this example we will use the Allow Pop ups for certain sites, I will start off by showing you the screenshot of the policy itself\nYou will notice that at the start and end of each URL there is a rather ugly looking set of characters, now this is where is can get messy. The pre-URL string is the only one that needs to be changed per entry. If you think of this like a list, option 1 in the list is http://euc365.com and option 2 is http://bbc.co.uk, As you can see in the screenshot the pre-URL has a number which needs to be incremented each time you add another URL.\nIf you are just having one URL you don’t need to add the final \u0026amp;#xF000;, However if you are using multiple values you will need to add that to the end of the URL and then follow it up with you next URL.\nThe last URL in the sequence should not be followed by \u0026amp;#xF000;\n Looking at putting the URL together you will end up with something like 1\u0026amp;#xF000; + https://euc365.com + \u0026amp;#xF000; + Following URLs, For a single url it would be 1\u0026amp;#xF000; + https://euc365.com\n","date":"30 June, 2020","image":["images/post/omauri/chromeadmx-300x208.png"],"permalink":"https://hugo.euc365.com/breaking-down-custom-oma-uri-csp-policies/","tags":null,"title":"Breaking Down Custom OMA-URI (CSP) Policies"},{"categories":["Intune","PowerShell Tools","PowerShell"],"contents":"SO\u0026hellip; I\u0026rsquo;ve been working tirelessly in trying to get an Autopilot Hybrid Deployment working along with my colleagues. As any Tech does I give everything my blood sweat and tears before logging a call with support (Sound silly as we could waste hours\u0026hellip; But where\u0026rsquo;s the fun in just logging a call), however on occasion you have to admit defeat and raise a service request.\nWhen logging an SR (Service Request) its always best to provide as much information about the device you are using (the one that\u0026rsquo;s having the issues) so the Microsoft Engineer can do as much fault finding and troubleshooting that they can before they contact you.\nWhen troubleshooting an Autopilot Deployment its useful to have the following information from a support engineer point of view but it is also helpful when speaking with Microsoft;\n Azure Device ID (GUID) Intune Device ID (GUID) Name (Not vital as it can be obtained from the above) IP Address Logon Server  Useful for Hybrid Deployments in an organisation with multiple Domain Controllers when using Azure AD Connect Device Serial Number (Easiest way to find a device in the Windows Enrolment Devices Screen)\nAll of that information is not just something that you can go grab in one place off of the shelf. Going to obtain all of this information from various locations got very long in the tooth and became a bit of a drag. In true IT fashion I spent hours writing a PowerShell script which Displays as a Windows Form and gathers all of this information and copies it to your clipboard.\nThe form will look like the below when run, It will only display active networks and it can handle more than one network (this is dynamic) and the form will resize dynamically depending on content.\n This will also copy the following information to your clipboard; Computer Name: Device Serial: Device Manufacturer: Device Model: Logon Server: Intune Device ID: AzureAD Device ID: IP Information: Interface Name: WiFi Interface Description: Intel(R) Wi-Fi 6 AX201 160MHz Profile Name: IPv4 Address: 192.168.0.141 IPv6 Address: Interface Name: Microsoft IP-HTTPS Platform Interface Interface Description: Profile Name: IPv4 Address: IPv6 Address: fd59:a9a9:6c55:1000:8c4a:531c:b003:cf56 Information gathered 23/05/2020 22:08:30 The form can be branded, and amended to your hearts content. I have uploaded it to GitHub in a Public Library if anyone wants to head over and download it or Fork it (Still not sure what that does, New to this GitHub stuff). I haven’t got around to putting any information on the GitHub Page yet but it you need any help drop me a message from the Contact page or on the GitHub page.\n","date":"23 May, 2020","image":["images/post/getdeviceinfo/banner.png"],"permalink":"https://hugo.euc365.com/getting-useful-device-information-troubleshooting-made-easy/","tags":null,"title":"Getting Useful Device Information… Troubleshooting Made Easy"}]