[{"categories":["Azure","Azure AD","Azure App Registrtions","Powershell","Autopilot","Intune"],"contents":"","date":"7 August, 2020","image":["images/post/enroltoap/featuredImage.png"],"permalink":"https://hugo.euc365.com/enrol-devices-to-autopilot-unattended/","tags":null,"title":"Enrol Devices to Autopilot (Unattended)"},{"categories":["Azure","Azure AD","Azure App Registrtions"],"contents":"What can you use an Azure App Registration for An Azure App Registration has many uses, in my case I use it mainly for the Microsoft Graph API to perform Intune Configuration Profile backups, List devices, Update local CMDB dynamically and also enrol devices into Autopilot.\nYou will see the vast amount of options you can use for the API when you start adding the API permissions below.\nIf you are also using MEMCM and Co-Managing devices with Intune or you have this Azure Tenant attached this will also be using an Azure App Registration to read user details and use user impersonation.\nHowever as you will notice this guide is focused on using the App Registration with the Microsoft Graph API with Client Secrets.\nFinding what API Permission is required for your Microsoft Graph API Call Each API can have a different set of permissions required to be able to read and/or write data. The best way to find these is by using the Microsoft Graph API Reference Guide .\nOnce you have loaded the API Reference guide, you will notice a list of categories for the API like below.\nFor this post I am using the importedWindowsAutopilotDeviceIdentities API reference which is in the Beta API. You can change what API Reference you are using by using the drop down under the Version header in the left-hand pane.\nIf you browse to Devices and apps \u0026gt; Corporate management \u0026gt; Imported windows autopilot device identity \u0026gt; List, You will see under the prerequisites which permissions that particular API requires as highlighted below.\nI will be using the Application permissions as the App this was created for is unattended\n You will notice that even though you are only listing devices that the ReadWrite permission is listed in the permission set. If you look closer at the permission table headers you will see it states Permissions (from most to least privileged) meaning that to use the full functionality of this API (such as Create, Delete and Update) you will need the ReadWrite permission, However if you just wanted to list the data you would only need the least amount of privileges which is Read.\nHave a browse around and notice the differences in different categories before moving on.\nCreating the Azure App Registration Head over to the Azure Portal  and launch Azure Active Directory.\nFrom the pane on the left select \u0026lt;strong\u0026gt;App Registrations\u0026lt;/strong\u0026gt; , from here you can either choose to use an existing registrations or create one for this specific purpose. I would however recommend that you use a specific one for this purpose, this way the app does not have more permissions than it requires.\nLets get started;\n Click New Registration from the ribbon Give the App a name that represents its purpose and leave the rest as default and click Register   From the left pane, select API Permissions, This is where we are going to grant the App the permission to the Microsoft Graph API Select Add a permission from the ribbon, you will see a pop out like the below;   Click on Microsoft Graph \u0026gt; Application Permissions In the search box type Service and this will show the permissions we require   Click Add Permissions You will then see a orange banner stating that the permissions are being edited and consent will need to be given   Click the Grant admin consent for, click Yes on the banner to confirm your would like to grant consent  \n Next we need a client secret... you will need to store this in a safe place as once you click of the page its hides all but a few characters. Click Client \u0026amp; Secrets from the pane on the left Click New Client Secret  Specify a description, if you are going to put this in numerous locations and let multiple people use it you could relate it to that team/department. But for this example we will keep it simple. Specify a validity period, you have three options, 1 year, 2 years or never. I would not recommend using the later and would ensure that you have processes in place to review the application     When you have added the secret, copy the value as you will need this later.  To go with the client secret you will also need the Application (Client) ID and the Directory (tenant) ID. These can be found on the Overview page.\nThe details you have gathered from this article you can use them to perform unattended actions on the Microsoft Graph API and other services. I will be posting some other blog posts which relate to using these details so keep an eye on the blog for interesting ways to use the App Registrations.\n","date":"8 July, 2020","image":["images/post/createazureapp/featuredImage.png"],"permalink":"https://hugo.euc365.com/create-an-azure-app-registration/","tags":null,"title":"Create an Azure App Registration"},{"categories":["Intune","Powershell Tools","PowerShell"],"contents":"What is an OMA-URI Policy? Meaning: Open Mobile Alliance Uniform Resource Identifier Traditionally when you implement a new piece of software which contains Group Policy Objects (GPO\u0026rsquo;s) to customise the feature of the application you would import the .adml and .admx files into the PolicyDefinitions folder located within SysVol (SYSVOL) for the domain or into the local PolicyDefinitions (C:/WindowsPolicyDefinitions) folder.\nIf like me you are wanting to move most if not all of your policies to Intune for better MDM (Mobile Device Management) then you can run into a rather complex scenario where you need to ingest the .admx file and then work out how to configure your policies correctly. Now the first time I looked at this I thought \u0026lsquo;Oh man this looks tricky, its a job for later on\u0026rsquo;. However after putting it off for so long I finally dived into it and it turns out it isn\u0026rsquo;t as complicated as it looks.\nThe link to the Microsoft Guide can be found HERE!! , Feel free to head over and check it out. Hopefully this post/guide can help you out when it comes to creating your own.\nImporting your ADMX file For this example we will be using Google Chrome\u0026rsquo;s GPO\u0026rsquo;s, Not because they are simple because each policy has its own complexities but because it will be a common policy people will look to migrate to Intune. The ADMX files can be found on the Chrome for Enterprise Download Page , you can obtain the gpo files only be finding the Manage Chrome Browser section.\nOnce downloaded extract the .zip file and find the Chrome.admx (Normally located within WindowsADMX), Open this in a text editor (Notepad will do fine). Now we will switch over to Intune, From the Endpoint Manager Admin Center Homepage select Devices \u0026gt; Configuration Profiles from the navigation bar. Click Create profile.\n Click **Create Profile** Select the following and click **Create**;   Enter the name for your profile (i.e Windows - Google Chrome Policy) and any other information you wish to add, click **Next** Now here is the fun part, Click **Add**   Enter a Name (Use something Descriptive) and Enter a description The OMA-URI Field Should be something like the below  .**/Vendor/MSFT/Policy/ConfigOperations/ADMXInstall/{AppName}/Policy/{ADMXFileName}**   Data Type: **String** Value: Paste the contents of the chrome.admx file   Click Add Now Proceed to deploy the policy (I would recommend doing this to a test group first)  The above path determines what the OMA-URI is for future policies, for example if you enter **./Vendor/MSFT/Policy/ConfigOperations/ADMXInstall/Chrome/Policy/ChromeAdmx **as the OMA-URI for the device import the policies within the ADMX will then be formatted like Chrome~Policy~googlechrome~Startup. \nThe full path for the OMA-URI for the Homepage Setting would be ./{AppName}/Vendor/MSFT/Policy/Config/Chrome~Policy~googlechrome~Startup/HomepageLocation. The format of the URI is is {AppName}~{SettingType}~{CategoryandSubCategory}.\nNow the category path may not just be a root category for example the startup settings will look like this Chrome~Policy~googlechrome~Startup to break it down\n  AppName: Chrome (Set in the ADMX File Ingest) SettingType: Policy (Set in the ADMX File Ingest) CategoryAndSubCategory  Category: googlechrom Sub Category: Startup      Now this may seem complicated at first glance, however do keep reading and I will explain how to obtain the paths and settings. Finding and Creating Policies Before we get started, if you haven\u0026rsquo;t already re-open the properties of the policy you created previously. You will also need to open the .admx files in your favourite text editor. Personally I use VSCode as it has syntax highlighting for XML files and many other useful features.\nNOTE: This section requires this to be published to a device.\nTo get started Open the Chrome.admx and **Chrome.adml **(This will be in the language folder i.e. en-US within the .zip file) and launch REGEDIT (Registry Editor).\nLet\u0026rsquo;s get started, within REGEDIT browse to **HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/PolicyManager/AdmxDefault **(There is always a random GUID per device, however this doesn\u0026rsquo;t make a difference to the policy so don\u0026rsquo;t worry :D), from here if you deployed the Chrome Policy as per the above steps you will see something like the below. (Note: this is showing Google Updates, but we will\nAs mentioned above they are broken down like below, we will be sticking with the Homepage setting which is within the startup category.\n AppName: Chrome SettingType: Policy Categories:  Root Category: googlechrome Sub Category: startup    Now if you look at the .admx file, you will see the following under the categories section As you can see that this correlates with with policy in the registry, now if you expand the policy within the registry you can see that the HomePage Location settings is created from within there\nThis is the part where you actually need the .admx file. Lets start by explaining why you need to use .admx file. For this example you are not only enabling or disabling a policy but you will be actually specifying a value. When you go to specify this value in Intune you will need to use the ValueName from within the ADMX File. See the below example;\nLets break the policy setting down first, As always I would recommend naming the setting descriptively and also adding a description if you want more information about it. The OMA-URI would then be ** ./Device/Vendor/MSFT/Policy/Config/Chrome~Policy~googlechrome~Startup/HomepageLocation.**\nClass (Device or User) One things to note here is the first section of the OMA-URI, It seems simple but you will need to specify if you want to apply this to a **Device **or User. Some policies are only available for Devices and likewise fort Users. You can see this in the ADMX File by looking at the policy like below\nNow the HomePageLocation setting can be User or Device based so the class shows as Both. If this was a device only policy class=\u0026ldquo;Machine\u0026rdquo; and for a user only policy it would show as class=\u0026ldquo;User\u0026rdquo;.\nAppName As mentioned above the AppName is can be totally customisable however I wouldn\u0026rsquo;t advise that and I would keep it as simple and descriptive as possible.\nFor example, For this post I used Chrome as the AppName so the Policies show as Chrome~{SettingType}~{Root Category}~{Sub Category}. If i was to do another policy for Lenovo Vantage for example and set the AppName to LenovoVantage the polcies would show** LenovoVantage~{SettingType}~{Root Category}~{Sub Category}. **\nSettingType As we imported the ADMX into the Policy section (./Vendor/MSFT/Policy/ConfigOperations/ADMXInstall/{AppName}/Policy/{ADMXFileName}) of the ADMXInstall OMA-URI this part of the OMA-URI would always be policy.\nCategories and Sub-Categories This is detailed above but I will elaborate a little bit more here.\nIf you look at the .admx file, and browse to the categories section you will see lots of categories set with a parent category within there.\nIf you work backwards you can see how this all comes together,\nThe OMA-URI is** Chrome~Policy~{Root Category}~{Sub** **Category}**\n **Sub Category:** Startup **Root Category:** googlechrome  Something to not here is that it is possible for a parent category to have another parent category to make matters more confusing. You could end up having a policy like **{AppName}~Policy~{Parent Category 1}~{Parent Category 2}~{Sub Category} ** and so on... Just something to always check. This is partly the reason to always check the registry when creating polcies.\nThe Policy Itself So finally we come to the policy itself, at the end all the OMA-URI string comes the setting, in this case HomePageLocation.\nThis is derived again from the .admx file, if you search for the policy you will come across something like the above screenshot. You will notice that the policy is based on the DisplayName property. We won\u0026rsquo;t cover setting the value in this section as I feel it deserves its own.\nThe Policy Value/Setting Some setting are really simple to configure, for example if you want to disable something like MetricsReportingEnabled you can simply just add like below\nOthers like the HomePageLocation are not complicated but require a little bit more than just a simple disable or enable switch as you need to specify a value for the property.\nAgain jumping back into the .admx file, if you look at the last highlighted section of the below screenshot you can see that there is a ValueName, now this is the value we need want to change.\nto do this you would need to write the policy string like the below screenshot\nIf you look at the data id section, this is where you would put the value name in out of the .admx file, from there you would then set the value of that property for example https://euc365.com.\nIf you apply this policy and sync it to your device you will notice that it will change the Homepage upon start up.\nNow\u0026hellip; Here is another example of adding a string to a policy which requires multiple values. This once is not so much tricky but its messy.\nFor this example we will use the Allow Pop ups for certain sites, I will start off by showing you the screenshot of the policy itself\nYou will notice that at the start and end of each URL there is a rather ugly looking set of characters, now this is where is can get messy. The pre-URL string is the only one that needs to be changed per entry. If you think of this like a list, option 1 in the list is http://euc365.com and option 2 is http://bbc.co.uk, As you can see in the screenshot the pre-URL has a number which needs to be incremented each time you add another URL.\nIf you are just having one URL you don’t need to add the final \u0026amp;#xF000;, However if you are using multiple values you will need to add that to the end of the URL and then follow it up with you next URL.\nThe last URL in the sequence should not be followed by \u0026amp;#xF000;\n Looking at putting the URL together you will end up with something like 1\u0026amp;#xF000; + https://euc365.com + \u0026amp;#xF000; + Following URLs, For a single url it would be 1\u0026amp;#xF000; + https://euc365.com\n","date":"30 June, 2020","image":["images/post/omauri/chromeadmx-300x208.png"],"permalink":"https://hugo.euc365.com/breaking-down-custom-oma-uri-csp-policies/","tags":null,"title":"Breaking Down Custom OMA-URI (CSP) Policies"},{"categories":["Intune","PowerShell Tools","PowerShell"],"contents":"SO\u0026hellip; I\u0026rsquo;ve been working tirelessly in trying to get an Autopilot Hybrid Deployment working along with my colleagues. As any Tech does I give everything my blood sweat and tears before logging a call with support (Sound silly as we could waste hours\u0026hellip; But where\u0026rsquo;s the fun in just logging a call), however on occasion you have to admit defeat and raise a service request.\nWhen logging an SR (Service Request) its always best to provide as much information about the device you are using (the one that\u0026rsquo;s having the issues) so the Microsoft Engineer can do as much fault finding and troubleshooting that they can before they contact you.\nWhen troubleshooting an Autopilot Deployment its useful to have the following information from a support engineer point of view but it is also helpful when speaking with Microsoft;\n Azure Device ID (GUID) Intune Device ID (GUID) Name (Not vital as it can be obtained from the above) IP Address Logon Server  Useful for Hybrid Deployments in an organisation with multiple Domain Controllers when using Azure AD Connect Device Serial Number (Easiest way to find a device in the Windows Enrolment Devices Screen)\nAll of that information is not just something that you can go grab in one place off of the shelf. Going to obtain all of this information from various locations got very long in the tooth and became a bit of a drag. In true IT fashion I spent hours writing a PowerShell script which Displays as a Windows Form and gathers all of this information and copies it to your clipboard.\nThe form will look like the below when run, It will only display active networks and it can handle more than one network (this is dynamic) and the form will resize dynamically depending on content.\n This will also copy the following information to your clipboard; Computer Name: Device Serial: Device Manufacturer: Device Model: Logon Server: Intune Device ID: AzureAD Device ID: IP Information: Interface Name: WiFi Interface Description: Intel(R) Wi-Fi 6 AX201 160MHz Profile Name: IPv4 Address: 192.168.0.141 IPv6 Address: Interface Name: Microsoft IP-HTTPS Platform Interface Interface Description: Profile Name: IPv4 Address: IPv6 Address: fd59:a9a9:6c55:1000:8c4a:531c:b003:cf56 Information gathered 23/05/2020 22:08:30 The form can be branded, and amended to your hearts content. I have uploaded it to GitHub in a Public Library if anyone wants to head over and download it or Fork it (Still not sure what that does, New to this GitHub stuff). I haven’t got around to putting any information on the GitHub Page yet but it you need any help drop me a message from the Contact page or on the GitHub page.\n","date":"23 May, 2020","image":["images/post/getdeviceinfo/banner.png"],"permalink":"https://hugo.euc365.com/getting-useful-device-information-troubleshooting-made-easy/","tags":null,"title":"Getting Useful Device Information… Troubleshooting Made Easy"}]