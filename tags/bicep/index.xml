<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bicep on EUC365 | Modern Technology Blog</title>
    <link>https://euc365.com/tags/bicep/</link>
    <description>Recent content in Bicep on EUC365 | Modern Technology Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 31 May 2023 08:37:04 +0000</lastBuildDate><atom:link href="https://euc365.com/tags/bicep/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Windows 365 Custom Images - Part 3 - Azure DevOps Deployment</title>
      <link>https://euc365.com/post/windows-365-custom-images-part-3-azure-devops-deployment/</link>
      <pubDate>Wed, 31 May 2023 08:37:04 +0000</pubDate>
      
      <guid>https://euc365.com/post/windows-365-custom-images-part-3-azure-devops-deployment/</guid>
      <description>&lt;p&gt;Welcome to the third post in the series talking about Windows 365 Custom Images, and how we can use Azure Image Builder to create these images. In this series of posts, we will cover the following topics;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 - &lt;a href=&#34;https://euc365.com/post/windows-365-custom-images-part-1-foundations/&#34;&gt;&lt;strong&gt;The Foundations&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2 - &lt;a href=&#34;https://euc365.com/post/windows-365-custom-images-part-2-powershell-deployment/&#34;&gt;&lt;strong&gt;PowerShell Deployment&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href=&#34;https://euc365.com/post/windows-365-custom-images-part-3-azure-devops-deployment/&#34;&gt;&lt;strong&gt;DevOps Deployment&lt;/strong&gt;&lt;/a&gt; (This Post)&lt;/li&gt;
&lt;li&gt;Part 4 - &lt;a href=&#34;https://euc365.com/post/windows-365-custom-images-part-4-azure-avd-ui/&#34;&gt;&lt;strong&gt;Azure Virtual Desktop UI Deployment&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of you may be like Veruca Salt from Charlie and the Chocolate Factory, and want all of the goodies &lt;strong&gt;Now&lt;/strong&gt; and opted to jump the second post in the series, and well, that is fine, I would have done the same thing ðŸ¤£, sorry not sorry.&lt;/p&gt;
&lt;p&gt;In this post, we will be looking at how we can use Azure DevOps to deploy our Windows 365 Custom Image. Please follow the process carefully, as missing any of the steps could leave you scratching your head as to why it is not working.&lt;/p&gt;

&lt;div class=&#34;notices info&#34; &gt;&lt;p&gt;This post assumes you have basic source control competency, and that you are familiar with the terminology such as, pull, push etc. If you are not, then I would recommend you read up on this before continuing.&lt;/br&gt;You will also need to have the ability to use Git on your workstation.&lt;/p&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;permission-requirements&#34;&gt;Permission Requirements&lt;/h2&gt;
&lt;p&gt;For this post, we do need some additional permissions, however these can be short lived as once we configure the pipelines, service principals etc, we will only need the ability to manage the source data.&lt;/p&gt;
&lt;h3 id=&#34;azure-devops&#34;&gt;Azure DevOps&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You will need the ability to Create a Project in Azure DevOps&lt;/li&gt;
&lt;li&gt;You will need the ability to Create a Service Connection in an Azure DevOps Project&lt;/li&gt;
&lt;li&gt;Have at least 1 Self-Hosted Agent or 1 Microsoft Hosted Agent available to run the pipeline (Free Tier is fine, the code is designed to run from a free tier account) - &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&amp;amp;tabs=yaml&#34;&gt;&lt;strong&gt;Documentation on Agents&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;notices warning&#34; &gt;&lt;p&gt;The free agents have a maximum run time of 1 hour and there are also limitations on monthly execution limits. As we go through this guide, you will notice that there are two pipelines to work around this been a problem.&lt;/p&gt;&lt;/div&gt;

&lt;h3 id=&#34;azure&#34;&gt;Azure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Global Administrator&lt;/strong&gt; permissions to create the Service Principal &amp;amp; grant the required Application Permissions.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;getting-prepared&#34;&gt;Getting Prepared&lt;/h2&gt;
&lt;h3 id=&#34;azure-devops-project--service-connection&#34;&gt;Azure DevOps Project &amp;amp; Service Connection&lt;/h3&gt;
&lt;p&gt;First of all, lets get the Azure DevOps Project created, I would recommend following the &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/devops/organizations/projects/create-project?view=azure-devops&amp;amp;tabs=browser&#34;&gt;&lt;strong&gt;Microsoft Documentation&lt;/strong&gt;&lt;/a&gt; on this. The name of the project is not important, but I would recommend using something that is meaningful to you.&lt;/p&gt;
&lt;p&gt;Once you have the project created, we will need to create a Service Connection, again I would recommend following the &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&amp;amp;tabs=yaml&#34;&gt;&lt;strong&gt;Microsoft Documentation&lt;/strong&gt;&lt;/a&gt;, ensuring you select &lt;strong&gt;Resource Group&lt;/strong&gt; created in the Foundations post and you select &lt;strong&gt;Grant access permission to all pipelines&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;service-principal-app-registration&#34;&gt;Service Principal (App Registration)&lt;/h3&gt;
&lt;p&gt;You only need to run through this section if you want to upload the image to Windows 365, which I assume you do. If you do not, then you can skip this section.&lt;/p&gt;
&lt;p&gt;Not that it&amp;rsquo;s a habit of this post&amp;hellip; but I have another link&amp;hellip; this time it&amp;rsquo;s to one of my previous posts, &lt;a href=&#34;https://euc365.com/create_an_azure_app_registration/&#34;&gt;&lt;strong&gt;Create an Azure App Registration&lt;/strong&gt;&lt;/a&gt;, the service principal will need the following permissions;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CloudPC.ReadWrite.All&lt;/strong&gt; - This is required to upload the image to Windows 365&lt;/li&gt;
&lt;li&gt;It will also need the &lt;strong&gt;Custom&lt;/strong&gt; Role assigning on the resource group you created in the Foundations post. (By default this will be called &lt;strong&gt;Azure Image Builder Image Definition for &lt;code&gt;&amp;lt;Resource Group Name&amp;gt;&lt;/code&gt;&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;


















&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; class=&#34;mx-auto d-block&#34; src=&#34;https://euc365.com/images/post/w365/customimage/roleUMI_hu69e4290da9899aa02ab231893e9f5679_24893_749x0_resize_q100_h2_box_3.webp&#34; alt=&#34;Role UMI Assignment&#34; height=&#34;&#34; width=&#34;&#34;&gt;



&lt;/br&gt;
&lt;p&gt;Once you have the Service Principal created, you will need to create a secret, and take note of the &lt;strong&gt;Application (client) ID&lt;/strong&gt; and &lt;strong&gt;Client Secret&lt;/strong&gt; &amp;amp; the &lt;strong&gt;Tenant ID&lt;/strong&gt; for later use.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-code&#34;&gt;The Code&lt;/h2&gt;
&lt;p&gt;Ok, now we are ready to start getting into the juicy bits!!&lt;/p&gt;
&lt;p&gt;Before we go any further, you will need to ensure you have cloned your repository to your local machine, ready to copy the code into the Azure DevOps Project.&lt;/p&gt;
&lt;p&gt;You can get all of the code using the GitHub Resource link below.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/brookd2404/windows365/tree/main/Custom%20Images/Azure%20DevOps&#34;&gt;&lt;img src=&#34;http://euc365.com/images/git_resource.png&#34; alt=&#34;GitHub Resource&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once you have download the code, and copied it into your local repository, we can start to update the code to suit your needs.&lt;/p&gt;
&lt;h3 id=&#34;image-template-bicep&#34;&gt;Image Template (BICEP)&lt;/h3&gt;
&lt;p&gt;The Image template file itself is located in the &lt;strong&gt;Templates&lt;/strong&gt; folder, and is called &lt;strong&gt;Windows365.bicep&lt;/strong&gt;. The only edits we need to make to this file for the purpose of this guide is the &lt;strong&gt;customizations&lt;/strong&gt;, this is where we will define the applications we want to install on the image along with any other scripted or inline customization.&lt;/p&gt;

















&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; class=&#34;mx-auto d-block&#34; src=&#34;https://euc365.com/images/post/w365/customimage/bicepcustomise_hue12491a4e3059e3eaf7fb4e6b7897415_36145_750x0_resize_q100_h2_box_3.webp&#34; alt=&#34;BICEP File Customisations&#34; height=&#34;&#34; width=&#34;&#34;&gt;



&lt;/br&gt;
&lt;p&gt;As you will see above there are two marked areas, the &lt;strong&gt;RED&lt;/strong&gt; area is where you will define the customisation objects and the &lt;strong&gt;YELLOW&lt;/strong&gt; area is a sample of what the customisation object looks like. You can read about more BICEP customisations objects &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/templates/microsoft.virtualmachineimages/imagetemplates?pivots=deployment-language-bicep#imagetemplatecustomizer-objects&#34;&gt;&lt;strong&gt;HERE&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you have made all your customisations, we can move onto looking at the parameters file.&lt;/p&gt;
&lt;h3 id=&#34;parameters&#34;&gt;Parameters&lt;/h3&gt;
&lt;p&gt;You will notice from the codeset, that there is a parameters file, this is what drives the BICEP file (Apart from Customisations) in the Templates folder.&lt;/p&gt;
&lt;p&gt;Separating the parameters from the BICEP file, allows us to use the same BICEP file for multiple deployments, without having to edit the BICEP file each time.&lt;/p&gt;
&lt;p&gt;If we open up the &lt;strong&gt;Windows365.parameters.json&lt;/strong&gt; file and take a look at the parameters that are available to set, all of which have descriptions to help you understand what they are for.&lt;/p&gt;
&lt;p&gt;There is one key parameters that you will need to set that is unique to your environment, that is the &lt;strong&gt;AIBMSIName&lt;/strong&gt; parameter. This is the name of the User Managed Identity in you resource group. If you are unsure of the name, you can find this in the Azure Portal, by navigating to the resource group you created in the Foundations post.&lt;/p&gt;
&lt;p&gt;All of the other parameters are set to default values, which you can change if you wish, but the image would provision with the default values.&lt;/p&gt;
&lt;h3 id=&#34;pipelines-yaml&#34;&gt;Pipelines (YAML)&lt;/h3&gt;
&lt;p&gt;As mentioned in the Getting Prepared section, we will be using two pipelines to cater for those using the free tier of Azure DevOps. The first pipeline will be used to create the image template and then invoke the build of the Managed Image, and the second pipeline will be used to upload the image to Windows 365.&lt;/p&gt;

&lt;div class=&#34;notices tip&#34; &gt;&lt;p&gt;If you are using a paid pipeline, you can combine the two pipelines into one, you will just need to ensure all of the correct variables are set and that you do not have any duplicate steps.&lt;/p&gt;&lt;/div&gt;

&lt;h4 id=&#34;pipeline-1---create-image-template--build-managed-image&#34;&gt;Pipeline 1 - Create Image Template &amp;amp; Build Managed Image&lt;/h4&gt;
&lt;h5 id=&#34;pipeline-name---createmanagedimageyaml&#34;&gt;Pipeline Name - CreateManagedImage.yaml&lt;/h5&gt;
&lt;p&gt;This pipeline will create the image template and then invoke the build of the Managed Image, there are a couple of variables that you will need to update prior to running the pipeline, these are;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Connection&lt;/strong&gt; - The name of the Azure DevOps Service Connector with access to subscription (Created Above)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;subscriptionID&lt;/strong&gt; - The subscription ID of the subscription you are deploying to&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;resourceGroup&lt;/strong&gt; - The name of the resource group you created in the Foundations post&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;imageTemplateName&lt;/strong&gt; - A name for the image template you want to create&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;location&lt;/strong&gt; - The region you want to deploy the resources to, i.e &amp;ldquo;UK South&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;template&lt;/strong&gt; - Path to the BICEP file e.g. &lt;strong&gt;Templates/Windows365.bicep&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;templateParameters&lt;/strong&gt; - Path to the parameters file e.g. &lt;strong&gt;Parameters/Windows365.parameters.json&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;notices tip&#34; &gt;&lt;p&gt;You will notice a commented out section in the pipeline, this section will allow you to create a schedule to run the pipeline on.&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;This pipeline also handles some other actions, such as clearing up existing templates, as this is not currently possible. We will cover the DeploymentActions.ps1 file in a later section.&lt;/p&gt;
&lt;h4 id=&#34;pipeline-2---upload-image-to-windows-365&#34;&gt;Pipeline 2 - Upload Image to Windows 365&lt;/h4&gt;
&lt;h5 id=&#34;pipeline-name---deploytow365yaml&#34;&gt;Pipeline Name - DeployToW365.yaml&lt;/h5&gt;
&lt;p&gt;This pipeline will upload the image to Windows 365, again there are a couple of variables that you will need to update prior to running the pipeline, these are the same as above. However, we will be adding Pipeline Variables later in the post once we have published the code, and created the pipeline in DevOps.&lt;/p&gt;
&lt;h4 id=&#34;deploymentactionsps1&#34;&gt;DeploymentActions.ps1&lt;/h4&gt;
&lt;p&gt;This script can be thought of as a boilerplate script, it is used to handle some of the actions that we run in a PowerShell script, this is customisable to your needs.&lt;/p&gt;
&lt;p&gt;If you wish to amend the Provisioning Profile type, data etc, this can be found in this script, the same goes for the Required Modules sections of the script.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;publish-the-code--createrun-the-pipelines&#34;&gt;Publish the Code &amp;amp; Create/Run the Pipelines&lt;/h3&gt;
&lt;p&gt;Once you have updated the code to suit your needs, you will need to push the code to your Azure DevOps Project and then we can head over to Azure DevOps to create the pipelines.&lt;/p&gt;
&lt;p&gt;Ok, so first of all, let us create the pipeline to create the image template and build the managed image.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open your DevOps Project&lt;/li&gt;
&lt;li&gt;In the left hand menu, select &lt;strong&gt;Pipelines&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Create Pipeline&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Azure Repos Git&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Select your repository&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Existing Azure Pipelines YAML file&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Select the &lt;strong&gt;CreateManagedImage.yaml&lt;/strong&gt; file, and click &lt;strong&gt;Continue&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;


















&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; class=&#34;mx-auto d-block&#34; src=&#34;https://euc365.com/images/post/w365/customimage/pipemanimage_hudeec81268b330ab108800f6c522c3040_18507_479x0_resize_q100_h2_box_3.webp&#34; alt=&#34;Create Managed Pipeline&#34; height=&#34;&#34; width=&#34;&#34;&gt;



&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;Check the details in the pipeline, and click &lt;strong&gt;Run&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ok, now we have the first pipeline running, we can create the second pipeline to upload the image to Windows 365.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In the left hand menu, select &lt;strong&gt;Pipelines&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;New Pipeline&lt;/strong&gt; (Top Right)&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Azure Repos Git&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Select your repository&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Existing Azure Pipelines YAML file&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Select the &lt;strong&gt;DeployToW365.yaml&lt;/strong&gt; file, and click &lt;strong&gt;Continue&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;


















&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; class=&#34;mx-auto d-block&#34; src=&#34;https://euc365.com/images/post/w365/customimage/pipedeploy_huffd282c64140e230de438d3f9b6bb626_18148_475x0_resize_q100_h2_box_3.webp&#34; alt=&#34;Create Deploy Pipeline&#34; height=&#34;&#34; width=&#34;&#34;&gt;



&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Click &lt;strong&gt;Variables&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;New variable&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Enter &lt;strong&gt;ClientID&lt;/strong&gt; in the &lt;strong&gt;Name&lt;/strong&gt; field, and the &lt;strong&gt;Application (client) ID&lt;/strong&gt; from the Service Principal you created earlier in the &lt;strong&gt;Value&lt;/strong&gt; field, and click &lt;strong&gt;OK&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;+&lt;/strong&gt; icon in the top right of the variables section&lt;/li&gt;
&lt;li&gt;Enter &lt;strong&gt;ClientSecret&lt;/strong&gt; in the &lt;strong&gt;Name&lt;/strong&gt; field, and the &lt;strong&gt;Client Secret&lt;/strong&gt; from the Service Principal you created earlier in the &lt;strong&gt;Value&lt;/strong&gt; field, select &lt;strong&gt;Keep this value secret&lt;/strong&gt; and click &lt;strong&gt;OK&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;+&lt;/strong&gt; icon in the top right of the variables section&lt;/li&gt;
&lt;li&gt;Enter &lt;strong&gt;TenantID&lt;/strong&gt; in the &lt;strong&gt;Name&lt;/strong&gt; field, and the &lt;strong&gt;Directory (tenant) ID&lt;/strong&gt; from the Service Principal you created earlier in the &lt;strong&gt;Value&lt;/strong&gt; field, and click &lt;strong&gt;OK&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You should end up with something that looks like this;&lt;/p&gt;


















&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; class=&#34;mx-auto d-block&#34; src=&#34;https://euc365.com/images/post/w365/customimage/variables_hud9efc08a6bb0eab0d48ef34c3fab449f_9776_479x0_resize_q100_h2_box_3.webp&#34; alt=&#34;Deploy Pipeline Variables&#34; height=&#34;&#34; width=&#34;&#34;&gt;



&lt;p&gt;This time don&amp;rsquo;t click &lt;strong&gt;Run&lt;/strong&gt;, instead use the dropdown next to it and click &lt;strong&gt;Save&lt;/strong&gt;. We will amend the name of the Pipeline by clicking the ellipses next to the &lt;strong&gt;Run Pipeline&lt;/strong&gt; button (Top Right), and then clicking &lt;strong&gt;Rename/Move&lt;/strong&gt;. Once you have renamed your pipeline, you can click &lt;strong&gt;Run Pipeline&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When you click run, it will queue this job and it will wait for the first pipeline to complete, before running.&lt;/p&gt;
&lt;h4 id=&#34;sample-outputs&#34;&gt;Sample Output(s)&lt;/h4&gt;
&lt;h5 id=&#34;overview-of-pipelines&#34;&gt;Overview of Pipelines&lt;/h5&gt;

















&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; class=&#34;mx-auto d-block&#34; src=&#34;https://euc365.com/images/post/w365/customimage/pipelinesoverview_hud8fd705d8e95f858ad27dfca40aa306b_25407_750x0_resize_q100_h2_box_3.webp&#34; alt=&#34;Overview of Pipelines&#34; height=&#34;&#34; width=&#34;&#34;&gt;



&lt;/br&gt;
&lt;h5 id=&#34;create-managed-image-pipeline&#34;&gt;Create Managed Image Pipeline&lt;/h5&gt;

















&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; class=&#34;mx-auto d-block&#34; src=&#34;https://euc365.com/images/post/w365/customimage/pipeline1_huca642fd523260eb418be34325ecc07ba_64621_750x0_resize_q100_h2_box_3.webp&#34; alt=&#34;Create Managed Image Pipeline&#34; height=&#34;&#34; width=&#34;&#34;&gt;



&lt;/br&gt;
&lt;h5 id=&#34;deploy-to-windows-365-pipeline&#34;&gt;Deploy to Windows 365 Pipeline&lt;/h5&gt;

















&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; class=&#34;mx-auto d-block&#34; src=&#34;https://euc365.com/images/post/w365/customimage/pipeline2_hucf13e8f87123791a75d7c22b8d8e1d5f_66682_750x0_resize_q100_h2_box_3.webp&#34; alt=&#34;Deploy to Windows 365 Pipeline&#34; height=&#34;&#34; width=&#34;&#34;&gt;



&lt;/br&gt;
&lt;h5 id=&#34;windows-365-image-in-the-console&#34;&gt;Windows 365 Image In the Console&lt;/h5&gt;

















&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; class=&#34;mx-auto d-block&#34; src=&#34;https://euc365.com/images/post/w365/customimage/w365Portal_hub792f1d997280632cb8ce8e8538634b1_26697_750x0_resize_q100_h2_box_3.webp&#34; alt=&#34;Windows 365 Image&#34; height=&#34;&#34; width=&#34;&#34;&gt;



&lt;hr&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Well this has been a fun post, this is by far the most in-depth post in the series, but man is it worth it!!&lt;/p&gt;
&lt;p&gt;Stick around for the next post in the series, where we will be looking at how to create Image templates with the new UI Features in Azure Virtual Desktop within the Azure Portal.&lt;/p&gt;
&lt;p&gt;As always, if you have any questions, please feel free to reach out to me on Twitter or leave a comment below.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use Bicep to Compile or Decompile ARM Templates</title>
      <link>https://euc365.com/post/use-bicep-to-compile-or-decompile-arm-templates/</link>
      <pubDate>Sun, 17 Jul 2022 11:50:17 +0000</pubDate>
      
      <guid>https://euc365.com/post/use-bicep-to-compile-or-decompile-arm-templates/</guid>
      <description>&lt;h2 id=&#34;what-is-bicep&#34;&gt;What is Bicep?&lt;/h2&gt;


&lt;div class=&#34;quote&#34;&gt;
  &lt;i class=&#34;ti-quote-left&#34;&gt;&lt;/i&gt;
  &lt;div&gt;
    &lt;p&gt;Bicep is a domain-specific language (DSL) that uses declarative syntax to deploy Azure resources. In a Bicep file, you define the infrastructure you want to deploy to Azure, and then use that file throughout the development lifecycle to repeatedly deploy your infrastructure. Your resources are deployed in a consistent manner.&lt;/p&gt;
    
    &lt;span class=&#34;quote-by&#34;&gt; -Microsoft&lt;/span&gt;
    
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;why-use-bicep-over-generic-arm-templates&#34;&gt;Why use Bicep over generic ARM Templates?&lt;/h3&gt;
&lt;p&gt;Although generic JSON ARM Templates are still needed for Azure Resource Manager, using Bicep makes creating ARM templates more consumable by the masses as it uses very simple syntax compared to its big sister, see the example in the &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/overview?tabs=bicep#benefits-of-bicep&#34;&gt;&lt;strong&gt;Benefits of Bicep&lt;/strong&gt;&lt;/a&gt; section of the documentation for examples.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;getting-started-with-bicep&#34;&gt;Getting started with Bicep&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s assume that you already have an IaC (Infrastructure as Code) strategy, and you are already using ARM Templates for deployment. Sometimes it can be a struggle for other colleagues/teams to reverse engineer your complex templates. So you decide to take a look at Bicep to help make them more consumable to your colleagues and team members.&lt;/p&gt;
&lt;p&gt;Well, Microsoft and the Bicep team could not have made this simpler to achieve!. Using the &lt;strong&gt;Bicep&lt;/strong&gt; command line tools, you can easily decompile (convert) your standard json template to Bicep&amp;hellip; and the best bit, your json template file (if used) still works seamlessly.&lt;/p&gt;
&lt;h3 id=&#34;pre-requisites&#34;&gt;Pre-requisites&lt;/h3&gt;

&lt;div class=&#34;notices info&#34; &gt;&lt;p&gt;I will be be using a Windows Client and VSCode for this post, using a different setup, your experience may differ.&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;Please visit the &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/install&#34;&gt;&lt;strong&gt;Install Bicep tools&lt;/strong&gt;&lt;/a&gt; page to install the Bicep tools.&lt;/p&gt;
&lt;h3 id=&#34;decompile-an-arm-template&#34;&gt;Decompile an ARM Template&lt;/h3&gt;
&lt;p&gt;This really couldn&amp;rsquo;t be any simpler, but just for the sake of completeness before you see the warning anyway, the decompilation of the templates is on a best efforts basis, if your template does not decompile then you can raise an issue on the link provided in your shell.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open VSCode to the directory where your templates are stored&lt;/li&gt;
&lt;li&gt;Type bicep decompile &lt;filename&gt;&lt;/li&gt;
&lt;li&gt;Review the output of the file&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The output file will be located in the same directory as the original file, but with a bicep extension. You can specify the output directory (which will need to exist first) by using the &amp;ndash;outdir parameter, or you can specify the file name but using the &amp;ndash;outfile parameter.&lt;/p&gt;

&lt;div class=&#34;notices tip&#34; &gt;&lt;p&gt;You can not specify both &amp;ndash;outdir and &amp;ndash;outfile together.&lt;/p&gt;&lt;/div&gt;
















&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; class=&#34;mx-auto d-block&#34; src=&#34;https://euc365.com/images/post/bicep/decompile.gif&#34; alt=&#34;&#34; height=&#34;&#34; width=&#34;&#34;&gt;



&lt;hr&gt;
&lt;h3 id=&#34;compile-and-arm-template-from-bicep&#34;&gt;Compile and ARM Template from Bicep&lt;/h3&gt;
&lt;p&gt;Again, this is relatively straightforward. My biggest use case for this at the moment is when I want to publish a &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/deploy-to-azure-button&#34;&gt;&lt;strong&gt;Deploy to Azure Button&lt;/strong&gt;&lt;/a&gt; as this still requires a JSON template to be passed in.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open VSCode to the directory where your templates are stored&lt;/li&gt;
&lt;li&gt;Type bicep build &lt;filename&gt;&lt;/li&gt;
&lt;li&gt;Review the output of the file&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The output file will be located in the same directory as the original file, but with a JSON extension. You can specify the output directory (which will need to exist first) by using the &amp;ndash;outdir parameter, or you can specify the file name but using the &amp;ndash;outfile parameter.&lt;/p&gt;

&lt;div class=&#34;notices tip&#34; &gt;&lt;p&gt;You can not specify both &amp;ndash;outdir and &amp;ndash;outfile together.&lt;/p&gt;&lt;/div&gt;
















&lt;img loading=&#34;lazy&#34; decoding=&#34;async&#34; class=&#34;mx-auto d-block&#34; src=&#34;https://euc365.com/images/post/bicep/compile.gif&#34; alt=&#34;&#34; height=&#34;&#34; width=&#34;&#34;&gt;



&lt;hr&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I enjoyed learning about Bicep over the course of a weekend, and going forward it will be my chosen language to be building template files for Azure as its so much easier than ARM templates for others to read.&lt;/p&gt;
&lt;p&gt;Why not start your journey using some of the resources below.&lt;/p&gt;
&lt;p&gt;Watch out for more Bicep and ARM posts coming soon.&lt;/p&gt;
&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/EN-US/azure/azure-resource-manager/bicep/&#34;&gt;&lt;strong&gt;Bicep Documentation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/learn-bicep&#34;&gt;&lt;strong&gt;Bicep Microsoft Learn Modules&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/EN-US/azure/azure-resource-manager/bicep/add-template-to-azure-pipelines?tabs=CLI&#34;&gt;&lt;strong&gt;Bicep with Pipelines&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>